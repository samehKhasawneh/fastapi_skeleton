[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Sameh khasawneh <>"]

[tool.poetry.dependencies]
python = "^3.12"
uvicorn = "^0.30.6"
fastapi = "^0.115.0"
gunicorn = "^23.0.0"
pydantic = "^2.9.2"
tenacity = "^9.0.0"
pydantic-settings = "^2.5.2"
boto3 = "^1.35.29"
botocore = "^1.35.29"
aiofiles = "^24.1.0"
psycopg = { version = "^3.2.3", extras = ["binary", "pool"] }
sqlalchemy = "^2.0.35"
alembic = "^1.13.3"
loguru = "^0.7.2"
sqlmodel = "^0.0.21"

[tool.poetry.dev-dependencies]
mypy = "^1.11.2"
ruff = "^0.6.8"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
httpx = "^0.27.2"
pytest-asyncio = "^0.24.0"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
line-length = 88  
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[build-system]
requires = ["poetry>=1.6.1"]
build-backend = "poetry.masonry.api"
